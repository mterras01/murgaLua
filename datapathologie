#!/bin/murgaLua
--data extraction from CSV "datapathologie"
--source=https://data.ameli.fr/explore/dataset/effectifs/export/
--datamodel & information = https://data.ameli.fr/explore/dataset/effectifs/information/
------>extract 
--"prevalence", "effectif patients" and "population"
--from region ARA
--where groupe patho ="maladies psychiatriques" or "Traitements psychotropes (hors pathologies)"
--and "tranche_d_age" = "tsage" (all ages)
--and "sexe" = "9" (all sex)
--order by year, groupe_patho, libelle

i=0

find = string.find
--gfind = string.gfind
sub = string.sub
gsub=string.gsub

read_data = "" --tampon de lecture
write_data = "" --tampon ecriture CSV département
size_eol = 0 -- varie selon Unix (MacOs) ou Windows


--tables modèle de données
groupe_patho={}
libelle_patho={}

--tables de calculs
table_preval={}
effectif_patho_annuel={}
effectif_patho_annuel_sx={} --permet de savoir si les 2 sexes sont bien enregistrés
effectif_pop_01={} --idem, département Ain
effectif_pop_01_sx={} --permet de savoir si les 2 sexes sont bien enregistrés

--autres données "non utiles"
buffer_grp_patho=""
buffer_lib_patho=""
buffer_dep={} --tampon codes régions
effectifs_departement={} --populations des régions par année
buffer_departement={}

--initialisation de tables
--prevalences
for i=1,6 do
     table_preval[i]={}
     --table_preval[an][idx_dep][idx_lib_patho] = preval
     for j=1,102 do
          table_preval[i][j]={}
          for k=1,70 do
               table_preval[i][j][k]="-"
          end
     end
end
--autres
for i=1,102 do
     --96 et 97 = 2A et 2B
     --98,99,100,101,102 = 971 GUADELOUPE, 972 MARTINIQUE, 973 GUYANE, 974 LA REUNION, 976 MAYOTTE
     effectifs_departement[i] = {}
     buffer_departement=""
     for j=1,6 do
          buffer_dep[j] = ""
          effectifs_departement[i][j] = 0 --effectif annuel region , 1=2015, 6=2020
     end
end

filename="/home/terras/Téléchargements/effectifs.csv"


--graphical objects & associated texts
code_reg ={1,2,3,4,6,11,24,27,28,32,44,52,53,75,76,84,93,94}
lib_reg={"GUADELOUPE","MARTINIQUE","GUYANE","LA REUNION","MAYOTTE","ILE-DE-FRANCE","CENTRE-VAL DE LOIRE","BOURGOGNE-FRANCHE-COMTE","NORMANDIE","NORD-PAS-DE-CALAIS-PICARDIE","ALSACE-CHAMPAGNE-ARDENNE-LORRAINE","PAYS DE LA LOIRE","BRETAGNE","AQUITAINE-LIMOUSIN-POITOU-CHARENTES","LANGUEDOC-ROUSSILLON-MIDI-PYRENEES","AUVERGNE-RHONE-ALPES","PROVENCE-ALPES-COTE D AZUR","CORSE"}
code_dep ={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102}
lib_dep={"Ain","Aisne","Allier","Alpes-de-Haute-Provence", "Hautes-Alpes", "Alpes-Maritimes", "Ardeche","Ardennes","Ariege","Aube","Aude","Aveyron","Bouches-du-Rhone","Calvados","Cantal","Charente","Charente-Maritime","Cher","Correze","ND","Cote-d Or","Cotes d Armor","Creuse","Dordogne", "Doubs","Drome","Eure","Eure-et-Loir","Finistere","Gard","Haute-Garonne","Gers","Gironde","Herault","Ille-et-Vilaine","Indre","Indre-et-Loire","Isere","Jura","Landes","Loir-et-Cher","Loire","Haute-Loire","Loire-Atlantique","Loiret","Lot","Lot-et-Garonne","Lozere","Maine-et-Loire","Manche","Marne","Haute-Marne","Mayenne","Meurthe-et-Moselle","Meuse","Morbihan","Moselle","Nievre","Nord","Oise","Orne","Pas-de-Calais","Puy-de-Dome","Pyrenees-Atlantiques","Hautes-Pyrenees","Pyrenees-Orientales","Bas-Rhin","Haut-Rhin","Rhone","Haute-Saone","Saone-et-Loire","Sarthe","Savoie","Haute-Savoie","Paris","Seine-Maritime","Seine-et-Marne","Yvelines","Deux-Sevres","Somme","Tarn","Tarn-et-Garonne","Var","Vaucluse","Vendee","Vienne","Haute-Vienne","Vosges","Yonne","Territoire de Belfort","Essonne","Hauts-de-Seine","Seine-St-Denis","Val-de-Marne","Val-D Oise","Corse-du-Sud","Haute-Corse","GUADELOUPE","MARTINIQUE","GUYANE","LA REUNION","MAYOTTE"}
lib_grp={"Autres affections de longue duree (dont 31 et 32)", "Cancers","Diabete","Hospitalisations ponctuelles (avec ou sans pathologies, traitements ou maternite)","Insuffisance renale chronique terminale","Maladies cardio-neurovasculaires","Maladies du foie ou du pancreas (hors mucoviscidose)","Maladies inflammatoires ou rares ou VIH ou SIDA","Maladies neurologiques ou degeneratives","Maladies psychiatriques","Maladies respiratoires chroniques (hors mucoviscidose)","Maternite (avec ou sans pathologies)","Pas de pathologies reperees, traitements, maternite, hospitalisations ni traitement antalgique ou anti-inflammatoire","Sejours en hospitalisation complete pour prise en charge de la Covid-19","Traitement antalgique ou anti-inflammatoire (hors pathologies, traitements, maternite ou hospitalisations)","Traitements du risque vasculaire (hors pathologies)","Traitements psychotropes (hors pathologies)"}
lib_trage={}
for i=1,19 do
     lib_trage[i] = "[" .. ((i-1)*5) .. "-" .. ((i*5)-1) .. "]"
end
lib_trage[20] = "[95+]"
lib_trage[21] = "tsage" 
  
button_reg={} --select region, by code
button_dep={}--select departement by code
button_grp={} --select group of pathologies
button_trage={} --select group of pathologies
--criterias from GUI
criteria_dep=0
criteria_reg=0
criteria_grp=0
criteria_trage=21 --default is "all ages"

--tampons d'écriture pour les fichiers texte et csv de sauvegarde
csv_buffer = ""
separator = ";"

osName="OS=" .. murgaLua.getHostOsName()

t00=0
t11=0

function define_textfile_origin(data)
  local i,st

  --finding if -CURRENTLY OPENED- text file
  -- is Unix or Windows -generated
  --searching for CR/LF (windows)
  st = string.char(13) .. string.char(10)
  i = find(data, st)
  if i then
--print("Ce fichier a ete genere par Windows => size_eol=2")
     size_eol=1 -- for windows remove CR+LF at end of line
     return("windows")
  else
--print("Ce fichier a ete genere par un Unix-like => size_eol=1")
     size_eol=1 -- for unixes remove only LF(?)
     return("unix")
  end
end --end function

function get_criterias()
    --graphic function : select criterias in a graphic fltk screen/window
    --not compatible with pure lua
    local nbl=0
    
    for i=1,#button_dep do
         if button_dep[i]:color() == 1 then
            criteria_dep=i
            break
         end
    end
    for i=1,#button_reg do
         if button_reg[i]:color() == 1 then
            criteria_reg=i
            break
         end
    end
    for i=1,#button_grp do
         if button_grp[i]:color() == 1 then
            criteria_grp=i
            break
         end
    end
    for i=1,#button_trage do
         if button_trage[i]:color() == 1 then
            criteria_trage=i
            break
         end
    end
    if  criteria_trage == 0 then
        criteria_trage = 21 --default is "all ages"
    end
    
    if criteria_grp>0 then
print("Selected Group of patho is " .. criteria_grp .. "-" .. lib_grp[ criteria_grp ])
    else
        st = " Select at least a Region or a Departement and a Group of patho !"
        fltk:fl_alert(st)  
        return
    end
    if (criteria_reg>0 or criteria_dep>0) and criteria_grp>0 then
       if criteria_reg>0 then
print("Selected Region is " .. code_reg[ criteria_reg ] .. " - " .. lib_reg[ criteria_reg ])
       else
print("Selected Departement is " .. code_dep[ criteria_dep ] .. " - " .. lib_dep[ criteria_dep ])
       end
print("Selected group of ages is " .. lib_trage[ criteria_trage ])
       nbl = load_database(filename)
       if nbl then
          str = define_textfile_origin( read_data )
          --st = filename .. " a ete ouvert avec succes et contient " .. nbl .. " lignes (systeme d'origine du fichier=" .. str .. ")."
          --fltk:fl_alert(st)
       else
          st = filename .. " n'a pu etre ouvert : merci de revoir les noms et chemins pour ce fichier !"
          fltk:fl_alert(st)
          exit(0)
       end
       --shutting display
       cwindow:hide()
       
       build_base()
       create_csv_file()
       if #csv_buffer >0 then
          save_csv_file()
       end
       read_data=nil --releasing some 0.5 GB RAM
       print("Traitement en " .. os.difftime(os.time(), t00) .. " secondes, soit en " .. string.format('%.2f',(os.difftime(os.time(), t00)/60)) .. " mn, soit en " .. string.format('%.2f',(os.difftime(os.time(), t00)/3600)) .. " heures")
       
       --display
       --cwindow:redraw()
    else
       st = " Select at least a Region OR a Departement AND a Group of patho !"
       fltk:fl_alert(st)  
    end
end --end function

function reset_criteria()
    --graphic function : select criterias in a graphic fltk screen/window
    --not compatible with pure lua    
    local i,str
    local nb_select=0
    
    --clean all selections
    for i=1,#button_dep do
         button_dep[i]:color(29)
    end
    for i=1,#button_reg do
         button_reg[i]:color(29)
    end
    for i=1,#button_grp do
         button_grp[i]:color(29)
    end
    criteria_dep,criteria_reg,criteria_grp=0,0,0
    
    cwindow:redraw()
end --end function

function retbuttrage()
     --graphic function : select criterias in a graphic fltk screen/window
     --not compatible with pure lua
    local i
    local nb_select=0
    
    for i=1,#lib_trage do
         if Fl:event_inside(button_trage[i]) ==1 then
            if button_trage[i]:color() == 1 then
               button_trage[i]:color(29)
            else
               button_trage[i]:color(1)
            end
         else
              --coherence control : one only group at a time
              button_trage[i]:color(29)
         end
    end
    --display nb of selections & coherence control : if one region is selected, departements remains UNselected
    for i=1,#button_trage do
         if button_trage[i]:color() == 1 then
            nb_select = nb_select+1
         end
    end
    if nb_select>0 then
       str = "\n\nSelect ONE Group of ages " .. nb_select .. " Group selected"
    else
       str = "\n\nSelect ONE Group of ages"
    end
    trage_box:label(str)
    
    cwindow:redraw()  
end --end function

function retbutgrp()
     --graphic function : select criterias in a graphic fltk screen/window
     --not compatible with pure lua
    local i
    local nb_select=0
    
    for i=1,#lib_grp do
         if Fl:event_inside(button_grp[i]) ==1 then
            if button_grp[i]:color() == 1 then
               button_grp[i]:color(29)
            else
               button_grp[i]:color(1)
            end
         else
              --coherence control : one only group at a time
              button_grp[i]:color(29)
         end
    end
    --display nb of selections & coherence control : if one region is selected, departements remains UNselected
    for i=1,#button_grp do
         if button_grp[i]:color() == 1 then
            nb_select = nb_select+1
         end
    end
    if nb_select>0 then
       str = "\nSelect ONE Group of patho (France) " .. nb_select .. " Group selected"
    else
       str = "\nSelect ONE Group of patho (France)"
    end
    grp_box:label(str)
    
    cwindow:redraw()  
end --end function

function retbutdep()
     --graphic function : select criterias in a graphic fltk screen/window
     --not compatible with pure lua    
    local i,str
    local ns,nb_select=0,0
    
    for i=1,#button_dep do
         if button_dep[i]:color() == 1 then
            ns = ns+1
         end
    end
 if ns<=10 then
    --limit selections at 10-11
    for i=1,#button_dep do
         if Fl:event_inside(button_dep[i]) ==1 then
            --print("Evenement " .. Fl:event_inside(button_dep[i]) .. "dans le bouton region " .. lib_dep[i])
            if button_dep[i]:color() == 1 then
               button_dep[i]:color(29)
            else
               button_dep[i]:color(1)
            end
         else
              --coherence control : one only DEPARTEMENT at a time
              button_dep[i]:color(29)
         end
    end    
    --display nb of selections & coherence control : if at least one departement is selected, REGION remains UNselected
    for i=1,#button_dep do
         if button_dep[i]:color() == 1 then
            nb_select = nb_select+1
         end
    end
    if nb_select>0 then
       str = "\n\n\n\n\nSelect one Departement's code (France) " .. nb_select .. " Departement selected"
    else
       str = "\n\n\n\n\nSelect one Departement's code (France) "
    end
    dep_box:label(str)
    
    --unselect
    if nb_select > 0 then
       for i=1,#button_reg do
            button_reg[i]:color(29)
       end
    end
    str = "\nSelect ONE Region's code (France)"
    reg_box:label(str)
    cwindow:redraw()
 end
end --end function

function retbutreg()
     --graphic function : select criterias in a graphic fltk screen/window
     --not compatible with pure lua
    local i
    local nb_select=0
    
    --print("event_x = " .. Fl:event_x() .. " / event_y = " .. Fl:event_y())
    for i=1,#button_reg do
         if Fl:event_inside(button_reg[i]) ==1 then
            --print("Evenement " .. Fl:event_inside(button_reg[i]) .. "dans le bouton region " .. lib_reg[i])
            if button_reg[i]:color() == 1 then
               button_reg[i]:color(29)
            else
               button_reg[i]:color(1)
            end
         else
              --coherence control : one only REGION at a time
              button_reg[i]:color(29)
         end
    end
    --display nb of selections & coherence control : if one region is selected, departements remains UNselected
    for i=1,#button_reg do
         if button_reg[i]:color() == 1 then
            nb_select = nb_select+1
         end
    end
    if nb_select>0 then
       str = "\nSelect ONE Region's code (France) " .. nb_select .. " Region selected"
    else
       str = "\nSelect ONE Region's code (France)"
    end
    reg_box:label(str)
    --unselect 
    if nb_select > 0 then
       for i=1,#button_dep do
            button_dep[i]:color(29)
       end
    end    
    --display
    str = "\n\n\n\n\nSelect one Departement's code (France)"
    dep_box:label(str)
    
    cwindow:redraw()
end  --end function

function quit_gui()
     --graphic function : select criterias in a graphic fltk screen/window
     --not compatible with pure lua
     cwindow:hide()
     os.exit(0)
end

function get_data_from_line_DP( line_datapathologies )
local annee, grp_patho,ssgrp_patho,lib_patho,classe_dage,sex,reg,depart,effectif_pati,effectif_pop,prevalence
local ca,str,str2
local i, j,k, dep,code_dep
local pos_sep={}

--print("line_datapathologies = " .. line_datapathologies)
dep=1
for i=1,12 do
     j = find(line_datapathologies, separator, dep)
     table.insert(pos_sep, j)
     dep=j+1
end
annee =  tonumber( sub(line_datapathologies, 1, pos_sep[1]-1) )
grp_patho=sub(line_datapathologies, pos_sep[1]+1, pos_sep[2]-1)
ssgrp_patho=sub(line_datapathologies, pos_sep[2]+1, pos_sep[3]-1)
lib_patho=sub(line_datapathologies, pos_sep[3]+1, pos_sep[4]-1)
ca=sub(line_datapathologies, pos_sep[5]+1, pos_sep[6]-1)
--une classe d'age = 5 ans, la classe d'age 1 est [0-4], la 2 est [5-9], etc
--print("classe age = " .. ca)
if ca then
   if ca == "95et+" then
       -- age >=95
       classe_dage = 20
   elseif ca == "tsage" then 
       --all ages
       classe_dage = 21
   else
      -- age group is computed with first number before "-"
      k = find(ca, "-", 1)
      i = (tonumber( sub(ca, 1, k-1) )/5)
      classe_dage = i+1
   end
else
   classe_dage = -2 --inconnu
end
--print("index classe d'age = " .. classe_dage)
sex=tonumber(sub(line_datapathologies, pos_sep[6]+1, pos_sep[7]-1))
if sex == 1 or sex == 2 or sex == 9 then
   --rien de plus
else
   sex=-1
end
reg=tonumber( sub(line_datapathologies, pos_sep[7]+1, pos_sep[8]-1) )
--depart=tonumber( sub(line_datapathologies, pos_sep[8]+1, pos_sep[9]-1) )
code_dep = sub(line_datapathologies, pos_sep[8]+1, pos_sep[9]-1)
if sub(code_dep,1,2) == "2A" then
   depart=96
elseif sub(code_dep,1,2) == "2B" then
   depart=97
elseif sub(code_dep,1,3) == "971" then
   depart = 98
elseif sub(code_dep,1,3) == "972" then
   depart = 99
elseif sub(code_dep,1,3) == "973" then
   depart = 100
elseif sub(code_dep,1,3) == "974" then
   depart = 101
elseif sub(code_dep,1,3) == "976" then
   depart = 102
else
   depart=tonumber( code_dep )
end
effectif_pati=tonumber( sub(line_datapathologies, pos_sep[9]+1, pos_sep[10]-1) )
if effectif_pati == nil then
   effectif_pati = 0
end
effectif_pop=tonumber( sub(line_datapathologies, pos_sep[10]+1, pos_sep[11]-1) )
if effectif_pop == nil then
   effectif_pop = 0
end
prevalence = sub(line_datapathologies, pos_sep[11]+1, pos_sep[12]-1)
 return annee, grp_patho,ssgrp_patho,lib_patho,classe_dage,sex,reg,depart,effectif_pati,effectif_pop,prevalence
end --end function

function process(line_datapathologies)
 local i,str,str2,str3,str4,count,idx
 local annee, grp_patho,ssgrp_patho,lib_patho,classe_dage,sex,reg,depart,effectif_pati,effectif_p,preval
 local an --conversion annee en index table : 1=2015.. 6=2020
 local idx_dep, idx_lib_patho
 
--st = line_datapathologies .. " envoyee a la fonction process()"
--fltk:fl_alert(st)
 
  if line_datapathologies then 
     annee, grp_patho,ssgrp_patho,lib_patho,classe_dage,sex,reg,depart,effectif_pati,effectif_p,preval = get_data_from_line_DP( line_datapathologies)
     
     --compliance testing
     if depart == nil then
        --abort
        return
     end
     if depart <1 or depart >102 then
        --abort
        return
     end
     --test CRITERIAS
     if criteria_reg>0 then
        if reg ~= code_reg[ criteria_reg ] then
            --abort
            return
        end
     end
     if criteria_dep>0 then
           idx_dep = tonumber(depart)
           if idx_dep > 0 and idx_dep < 103 then
              if depart ~= criteria_dep then
                 --abort
                 return
              end
           end
     end
     if criteria_grp>0 then
        if grp_patho ~= lib_grp[criteria_grp] then
            --abort
            return
        end
     end
     if criteria_trage>0 then
        if classe_dage ~= criteria_trage then
            --abort
            return
        end
     end
     
     if annee then 
        an = annee-2014 --index for tables
     else
        --abort
        return
     end
     
     --SELECT criterias
       if sex == 9 then
               str = "*" .. lib_patho
               if find(buffer_lib_patho,lib_patho,1,true) then
                  --already recorded : compute index 
                  i = find(buffer_lib_patho, str,1,true)
                  str2 = sub(buffer_lib_patho,1,i)
                  j, count = gsub(str2, "*", "")
                  idx_lib_patho = count
               else
                  --new record
                  buffer_lib_patho = buffer_lib_patho .. str
                  table.insert(libelle_patho, lib_patho)
                  idx_lib_patho = #libelle_patho
               end
               if an and idx_lib_patho then
--print("an , depart , idx_lib_patho = " .. an .. ", " .. depart .. ", " .. idx_lib_patho)
                  table_preval[an][depart][idx_lib_patho] = preval
               end
       end --if sex == 9

   -- effectifs patients departement par annee ------------------------------------------------------------------
    if sex == 9 then
         str4 = "*" .. string.format("%02d",depart)
         if find(buffer_dep[an], str4) then
            --déjà enregistré
         else
            buffer_dep[an] = buffer_dep[an] .. str4
            effectifs_departement[depart][an] = effectif_p
         end
     end --sex == 9 

  end --if line_datapathologies
  
end   --end function  

function build_base() 
  local i,j
  local nbl=1
  local str    
  local pos=1
  
  while 1 do
      j = find(read_data,"\n",pos)
      if j then
	     line_datapathologies = sub(read_data, pos, j-1)
		 if line_datapathologies  then
            --if nbl>1 then
            if pos ~= 1 then
               --excluding "legende" line
  	           process(line_datapathologies)
            end
	        pos = j+size_eol
	        nbl = nbl+1
		 else
st = "line_datapathologies est nulle !"
fltk:fl_alert(st)
		 end
	  else
	     break
	  end
  end
end  --end function  

function load_database(filename)
  local st=""
  local nbl=0
  
  local f = 0
  local i = 0
  local j = 0
  local pos=1
  local str
  
  --filename = fltk.fl_file_chooser("SELECTION de FICHIER RAA", "TXT Files (*.{txt,TXT})", SINGLE, nil)
  f = io.open(filename,"rb")
  if f then
     read_data = f:read("*all")
     print("Lecture reussie pour le fichier " .. filename .. ", taille=" .. #read_data .. " octets")
     io.close(f)
     while 1 do
        j = find(read_data,"\n",pos)
        if j then
	       pos = j+2
	       nbl = nbl+1
	    else
	       break
	    end
     end
print("Nb de lignes = " .. nbl)
     return nbl
  else
     print("Pas de fichier " .. filename .. " dans le dossier par defaut ")
     return null
  end
end --end function

function save_csv_file() 
  local f, filename, st, str
  
  if criteria_dep>0 then
      str = "DEP" .. string.format("%02d",criteria_dep)
  end
  if criteria_reg>0 then
     str = "REG" .. string.format("%02d",code_reg[ criteria_reg ])
  end
  if criteria_grp>0 then
     str = str .."_GRP" .. string.format("%02d",criteria_grp)
  end
  if criteria_trage>0 then
     str = str .."_AGE" .. string.format("%02d",criteria_trage)
  end
  
  filename = "STATS_DATAPATHOLOGIES_" .. str .. "_090822.csv"
  f = io.open(filename,"wb")
  if f then
     f:write(csv_buffer)
     print(filename .. " sauvegarde, taille=" .. #csv_buffer .. " octets.")
     io.close(f)
	 --st = filename .. " sauvegarde !"
	 --fltk:fl_alert(st)
  else
    filename=nil
	 st = "Sauvegarde impossible du CSV!"
	 fltk:fl_alert(st)
  end
end --end function

function create_csv_file() 
  local i,j,legende_csv
  local str,str2,str3
  local car={}
  local legende_age={}
  local an={2015,2016,2017,2018,2019,2020}
  
  csv_buffer = "CRITERIAS\n"
  if criteria_dep ~= 0 then
     csv_buffer = csv_buffer .. "Departement = " .. lib_dep[criteria_dep] .. "\n"
  end
  if criteria_reg ~= 0 then
     csv_buffer = csv_buffer .. "Region = " .. lib_reg[criteria_reg] .. "\n"
  end
  if criteria_grp ~= 0 then
     csv_buffer = csv_buffer .. "Group Patho = " .. lib_grp[criteria_grp] .. "\n"
  end
  if criteria_trage ~= 0 then
     csv_buffer = csv_buffer .. "Group ages = " .. lib_trage[criteria_trage] .. "\n\n"
  end
  
  legende_csv = "PREVALENCES PATHOLOGIES\n" .. "Libellé Pathologie" .. separator .. "DEPARTEMENT".. separator .. an[1] .. separator .. an[2] .. separator .. an[3] .. separator .. an[4] .. separator .. an[5] .. separator .. an[6] .. "\n"
  csv_buffer = csv_buffer .. legende_csv
  print("#libelle_patho = " .. #libelle_patho)
  for i=1,#libelle_patho do
      for j=1,102 do 
        if table_preval[1][j][i] ~= "-" then
--print("Num departement en cours = " .. j)
          if j== 96 then 
             str2 = "2A"
          elseif j== 97 then 
             str2 = "2B"
             ----98,99,100,101,102 = 971 GUADELOUPE, 972 MARTINIQUE, 973 GUYANE, 974 LA REUNION, 976 MAYOTTE
          elseif j == 98 then
             str2 = "971"
          elseif j == 99 then
             str2 = "972"
          elseif j == 100 then
             str2 = "973"
          elseif j == 101 then
             str2 = "974"
          elseif j == 102 then
             str2 = "976"
          else
             str2 = string.format("%02d",j)
          end
          str2 = str2 .. "-" .. lib_dep[j]
          for k=1,6 do
               if table_preval[k][j][i] then
                  car[k] = table_preval[k][j][i]
               end
          end
           str = libelle_patho[i] .. separator .. str2  .. separator ..  car[1] .. separator .. car[2] .. separator .. car[3] .. separator .. car[4] .. separator .. car[5] .. separator .. car[6] .. "\n"
           csv_buffer = csv_buffer .. str
        end
      end
  end
  
  --REGION SELECTED => display all populations from regions's departement
  if criteria_reg>0 then
    str3="POPULATIONS DEPARTEMENTS\nREGION ".. lib_reg[criteria_reg] .. "\n"
  end
  if criteria_dep>0 then
      str3="POPULATIONS DEPARTEMENT\n"
  end
     csv_buffer = csv_buffer .. "\n\n"
     legende_csv = str3 .. "CODE DEPARTEMENT" .. separator .. an[1] .. separator .. an[2] .. separator .. an[3] .. separator .. an[4] .. separator .. an[5] .. separator .. an[6] .. "\n"
     csv_buffer = csv_buffer .. legende_csv
     for i=1,102 do
        if effectifs_departement[i][1] > 0 then
           if i == 96 then 
              str2 = "2A"
           elseif i == 97 then 
              str2 = "2B"
           elseif i == 98 then
              str2 = "971"
           elseif i == 99 then
              str2 = "972"
           elseif i == 100 then
              str2 = "973"
           elseif i == 101 then
              str2 = "974"
           elseif i == 102 then
              str2 = "976"
           else
              str2 = string.format("%02d",i)
           end 
           str2 = str2 .. "-" .. lib_dep[i]
           str = str2 .. separator .. effectifs_departement[i][1] .. separator .. effectifs_departement[i][2] .. separator .. effectifs_departement[i][3] .. separator .. effectifs_departement[i][4] .. separator .. effectifs_departement[i][5] .. separator .. effectifs_departement[i][6] .. "\n"
           csv_buffer = csv_buffer .. str
        end
     end
  --end
  
end --end function

t00 = os.time() --top chrono

  if osName == "OS=linux" then
     filename = "/home/terras/Téléchargements/datapathologies/effectifs.csv"
  else
     --filename = ""
  end

--st = filename .. " va etre ouvert !"
--fltk:fl_alert(st)

  -- fltk GUI --------------------------------------------------------------------------------------------------------------------------------------------------------------
  fltk:fl_font(FL_SCREEN, 14)
  width_window = 600
  height_window = 600
  cwindow = fltk:Fl_Double_Window(width_window, height_window, "Some criteria for your query / datapathologie")
  stopbutton = fltk:Fl_Button(1, 2, 60, 20, "Quit")
  stopbutton:callback(quit_gui)
  resetbutton = fltk:Fl_Button(65, 2, 60, 20, "Reset")
  resetbutton:callback(reset_criteria)
  resetbutton:tooltip("Clear all selections")
  launchbutton = fltk:Fl_Button(130, 2, 60, 20, "Launch")
  launchbutton:tooltip("Launch query with criteria(s)")
  launchbutton:callback(get_criterias)
  downsbutton = fltk:Fl_Button(195, 2, 90, 20, "DownSizing")
  downsbutton:tooltip("Downsizing complete CSV to a single Departement")
  downsbutton:callback(downsizing)
  --place other buttons 
  reg_box = fltk:Fl_Box(1, 28, 596, 74, "")
  reg_box:label("\nSelect ONE Region's code (France)")
  reg_box:color(25)
  reg_box:box(3) 
  reg_box:tooltip("Select ONE Region's code (France)")
  for i=1,#code_reg do
       j=8+((i-1)*32)
       table.insert(button_reg, fltk:Fl_Button(j, 32, 32, 20, ""))
       str = string.format("%02d",code_reg[i] )
--print("code_reg[" .. i .. "]=" .. str)
       button_reg[#button_reg]:label( str )
       button_reg[#button_reg]:tooltip(  lib_reg[i] )
       button_reg[#button_reg]:callback(retbutreg)
  end
  
  dep_box = fltk:Fl_Box(1, 108, 596, 200, "")
  dep_box:label("\n\n\n\n\nSelect one Departement's code (France)") --CRs for title to be in a downer location
  dep_box:color(19)
  dep_box:box(3) 
  dep_box:tooltip("Select one Departement's code (France)")
  lines=1
  cols=1
  for i=1,#code_dep do
       table.insert(button_dep, fltk:Fl_Button(8+((cols-1)*32), 112+(lines-1)*20, 32, 20, ""))
       cols=cols+1
       if cols>18 then
          cols=1
          lines=lines+1
       end
       if code_dep[i] == 96 then
          str = "2A"
       elseif code_dep[i] == 97 then
          str = "2B"
       elseif code_dep[i] == 98 then
          str = "971"
       elseif code_dep[i] == 99 then
          str = "972"
       elseif code_dep[i] == 100 then
          str = "973"
       elseif code_dep[i] == 101 then
          str = "974"
       elseif code_dep[i] == 102 then
          str = "976"
       else
          str = string.format("%02d",code_dep[i])
       end
       button_dep[#button_dep]:label( str)
       button_dep[#button_dep]:tooltip(  lib_dep[i] )
       button_dep[#button_dep]:callback(retbutdep)
  end
  
  grp_box = fltk:Fl_Box(1, 315, 596, 74, "")
  grp_box:label("\nSelect one group of patho") --CRs for title to be in a downer location
  grp_box:color(25)
  grp_box:box(3) 
  grp_box:tooltip("Select one Group of patho")
  lines=1
  cols=1
  for i=1,#lib_grp do
       table.insert(button_grp, fltk:Fl_Button(8+((cols-1)*32), 320+(lines-1)*20, 32, 20, ""))
       cols=cols+1
       if cols>18 then
          cols=1
          lines=lines+1
       end
       str = string.format("%02d",i)
       button_grp[#button_grp]:label( str)
       button_grp[#button_grp]:tooltip(  lib_grp[i] )
       button_grp[#button_grp]:callback(retbutgrp)
  end
  
  trage_box = fltk:Fl_Box(1, 395, 596, 74, "")
  trage_box:label("\n\nSelect one group of ages") --CRs for title to be in a downer location
  trage_box:color(19)
  trage_box:box(3) 
  trage_box:tooltip("Select one Group of ages")
  lines=1
  cols=1
  for i=1,#lib_trage do
       table.insert(button_trage, fltk:Fl_Button(8+((cols-1)*52), 400+(lines-1)*20, 52, 20, ""))
       cols=cols+1
       if cols>11 then
          cols=1
          lines=lines+1
       end
       button_trage[#button_trage]:label( lib_trage[i] )
       button_trage[#button_trage]:tooltip(  lib_trage[i] )
       button_trage[#button_trage]:callback(retbuttrage)
  end
  
  cwindow:show()
  cwindow:make_current()
  
  --activate GUI command window
  Fl:check()
  Fl:run()
  --get criterias
